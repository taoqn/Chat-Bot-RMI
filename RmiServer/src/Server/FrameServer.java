/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Server;

import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.io.UnsupportedEncodingException;
import java.rmi.AccessException;
import java.rmi.AlreadyBoundException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import javax.swing.JOptionPane;
import java.sql.*;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;
import rmiserver.*;

/**
 *
 * @author Administrator
 */
public class FrameServer extends javax.swing.JFrame {

    private ServerImpl server;
    private String timeBK;
    public ServerBackupInterface serverBK = null;

    /**
     * Creates new form FrameServer
     * @throws java.sql.SQLException
     */
    public FrameServer() throws SQLException {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(true);
        this.setTitle("Server");
        timeBK = "23:59:00";
    }

    public void sendMsg(String x) {
        jKhungHienThi.append("\n" + x);
    }

    // Hàm setTimeBackup , Hàm Backup tự động
    public void setTimeBackup() { 
        Timer ti = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                Date date = new Date();
                SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");// Định dạng ngày tháng Giờ:Phút:giây
                String timeHienTai = sdf.format(date);// Đặt thời gian hiện tại
                jLabelTime.setText(timeHienTai); // Hiện Thị Đồng Hồ Điện Tử
                if (timeHienTai.equals(timeBK)) {
                    try {
                        if (serverBK == null) { // Phương thức kết nối tới ServerBackup
                            Registry r = LocateRegistry.getRegistry("localhost", 4444);
                            serverBK = (ServerBackupInterface) r.lookup("rmi://localhost/Backup");
                        }
                        byte[] utf8Bytes = jKhungHienThi.getText().getBytes("UTF16");//lấy nội dung trong Khung Hiển Thị chuyển về mã UTF16
                        String data = new String(utf8Bytes, "Cp1252");//Dùng bộ mã Cp1252 chuyển về chuổi String
                        
                        SimpleDateFormat sdf1 = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
                        String time = sdf1.format(date);
                        if (serverBK.BackupData(time, data, "Server")) {
                            sendMsg("Hệ thống đã Sao Lưu tự động vào lúc :  " + date.toLocaleString() + "");
                            sendMsg("--------------------------------------------------------------------");
                        }
                    } catch (RemoteException | NotBoundException | UnsupportedEncodingException ex) {
                        JOptionPane.showMessageDialog(jMinute, "Không thể kết nối tới Server Backup !.");
                        Logger.getLogger(FrameServer.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
        ti.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonStart = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jKhungHienThi = new javax.swing.JTextArea();
        jLabelTime = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jHour = new javax.swing.JSpinner();
        jMinute = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jButtonSaoLuu = new javax.swing.JButton();
        jButtonXemLai = new javax.swing.JButton();
        jButtonDatGio = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonStart.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButtonStart.setText("Start");
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });

        jKhungHienThi.setEditable(false);
        jKhungHienThi.setColumns(20);
        jKhungHienThi.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        jKhungHienThi.setRows(5);
        jScrollPane1.setViewportView(jKhungHienThi);

        jLabelTime.setFont(new java.awt.Font("MV Boli", 1, 14)); // NOI18N
        jLabelTime.setForeground(new java.awt.Color(204, 0, 0));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Đặt giờ sao lưu");

        jHour.setModel(new javax.swing.SpinnerNumberModel(23, 0, 23, 1));

        jMinute.setModel(new javax.swing.SpinnerNumberModel(59, 0, 59, 1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText(":");

        jButtonSaoLuu.setText("Sao Lưu");
        jButtonSaoLuu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaoLuuActionPerformed(evt);
            }
        });

        jButtonXemLai.setText("Xem Lại");
        jButtonXemLai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonXemLaiActionPerformed(evt);
            }
        });

        jButtonDatGio.setText("Đặt giờ");
        jButtonDatGio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDatGioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelTime)
                                    .addComponent(jLabel2)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jHour, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jMinute, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonXemLai)
                            .addComponent(jButtonSaoLuu)
                            .addComponent(jButtonDatGio))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonDatGio, jButtonSaoLuu, jButtonXemLai});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelTime, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDatGio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonSaoLuu, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonXemLai, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonSaoLuu, jButtonXemLai});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
        try {// Khi chọn Start hàm này thực thi
            Registry r = LocateRegistry.createRegistry(1099);
            server = new ServerImpl(this);
            r.bind("rmi://localhost/ABC", server);
            JOptionPane.showMessageDialog(this, "Server đã sẵn sàng !.");
            jKhungHienThi.setText("Server đã sẵn sàng !");
            sendMsg("-------------------------------------------------------");
            setTimeBackup();// Gọi Hàm setTimeBackup
        } catch (RemoteException | AlreadyBoundException | HeadlessException | ClassNotFoundException | SQLException e) {
            Logger.getLogger(FrameServer.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_jButtonStartActionPerformed

    private void jButtonDatGioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDatGioActionPerformed
        // Xử lý thời gian hiện tại cho tự động Sao Lưu
        int h = Integer.parseInt(jHour.getValue().toString());
        int m = Integer.parseInt(jMinute.getValue().toString());
        String gio = "" + h, phut = "" + m;
        if (h < 10) {
            gio = "0" + h;
        }
        if (m < 10) {
            phut = "0" + m;
        }
        timeBK = gio + ":" + phut + ":00";
        JOptionPane.showMessageDialog(this, "Đặt giờ sao lưu thành công " + timeBK + " !");
    }//GEN-LAST:event_jButtonDatGioActionPerformed

    private void jButtonSaoLuuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaoLuuActionPerformed
        try {// Hàm Sao Lưu bằng tay
            if (!jKhungHienThi.getText().toString().equals("")) {
                if (serverBK == null) {
                    Registry r = LocateRegistry.getRegistry("localhost", 4444);
                    serverBK = (ServerBackupInterface) r.lookup("rmi://localhost/Backup");
                }
                byte[] utf8Bytes = jKhungHienThi.getText().getBytes("UTF16");
                String data = new String(utf8Bytes, "Cp1252");
                Date date = new Date();
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
                String time = sdf.format(date);
                if (serverBK.BackupData(time, data, "Server")) {
                    sendMsg("Hệ thống đã Sao Lưu  vào lúc :  " + date.toLocaleString() + "");
                    sendMsg("--------------------------------------------------------------------");
                    JOptionPane.showMessageDialog(this, "Sao Lưu thành công !");
                }
            }
        } catch (RemoteException | NotBoundException | UnsupportedEncodingException ex) {
            JOptionPane.showMessageDialog(this, "Không thể kết nối tới Server Backup !.");
            Logger.getLogger(FrameServer.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButtonSaoLuuActionPerformed

    private void jButtonXemLaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonXemLaiActionPerformed
        try {// Hiển thị Form Xem Lại các bảng Backup
            if (serverBK == null) {
                Registry r = LocateRegistry.getRegistry("localhost", 4444);
                serverBK = (ServerBackupInterface) r.lookup("rmi://localhost/Backup");
            }
            FrameViewBackup fvb = new FrameViewBackup(this);
            fvb.setVisible(true);
        } catch (RemoteException | NotBoundException ex) {
            JOptionPane.showMessageDialog(this, "Không thể kết nối tới Server Backup !.");
            Logger.getLogger(FrameServer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonXemLaiActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Tạo và hiển thị form Server */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FrameServer().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(FrameServer.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDatGio;
    private javax.swing.JButton jButtonSaoLuu;
    private javax.swing.JButton jButtonStart;
    private javax.swing.JButton jButtonXemLai;
    private javax.swing.JSpinner jHour;
    private javax.swing.JTextArea jKhungHienThi;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelTime;
    private javax.swing.JSpinner jMinute;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
